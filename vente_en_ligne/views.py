from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.models import User  # Pour g√©rer les utilisateurs
from django.contrib.auth import authenticate, login, logout
from django.contrib import messages
from .models import Produit, Categorie, Commande, Client, CommandeProduit
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from django.shortcuts import render, redirect
from .models import Client
from .forms import CustomUserCreationForm
from django.utils import timezone
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth.forms import PasswordChangeForm
from django.contrib.auth import update_session_auth_hash
import json
timezone.now



def home(request):
    return render(request, "home/home.html")

@login_required  # Cela permet de s'assurer que l'utilisateur est connect√©
def menu(request):
    return render(request, "user/menu.html") 

def register(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        contact = request.POST.get('contact')  # R√©cup√®re le contact
        adresse = request.POST.get('adresse')  # R√©cup√®re l'adresse

        if form.is_valid():
            print("‚úÖ Formulaire valide")
            print("üìå Champs disponibles :", form.cleaned_data.keys())  # Debugging

            # Cr√©ation de l'utilisateur
            user = form.save()

            # Cr√©ation du client
            Client.objects.create(
                user=user,
                nom_client=user.username,
                email_client=user.email,
                login_client=user.username,
                password_client=user.password,  # Django g√®re d√©j√† le hash du mot de passe
                contact=contact,
                adresse=adresse
            )

            messages.success(request, "Inscription r√©ussie ! Vous pouvez maintenant vous connecter.")
            return redirect('login')
        else:
            messages.error(request, "Le formulaire est invalide. Veuillez v√©rifier les champs.")
    else:
        form = CustomUserCreationForm()

    return render(request, 'home/register.html', {'form': form})





def login_view(request):
    if request.method == "POST":
        username = request.POST["username"]
        password = request.POST["password"]

        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            # V√©rifier si l'utilisateur est un admin ou un client
            if user.is_superuser:  # V√©rification si l'utilisateur est un admin
                messages.success(request, "Connexion r√©ussie ! Bienvenue, Admin.")
                return redirect("admin_home")  # Redirige vers la page d'administration
            else:
                messages.success(request, "Connexion r√©ussie ! Bienvenue, Client.")
                return redirect("menu")  # Redirige vers la page d'accueil du client
        else:
            messages.error(request, "Identifiants incorrects. R√©essaie.")
    
    return render(request, "home/login.html")  # Page de connexion


# D√©connexion
def logout_view(request):
    logout(request)
    messages.success(request, "D√©connexion r√©ussie !")
    return redirect("login")  # Redirige vers la connexion apr√®s la d√©connexion

def produits(request):
    produits_list = Produit.objects.all()  # R√©cup√®re tous les produits
    return render(request, 'user/produits_list.html', {'produits': produits_list})


@login_required
def mes_commandes(request):
    try:
        client = Client.objects.get(user=request.user)  # üî• R√©cup√©rer le Client li√© au User
        commandes = Commande.objects.filter(client=client).order_by('-date_commande')
    except Client.DoesNotExist:
        commandes = []  # Si le client n'existe pas, √©viter l'erreur

    return render(request, 'user/commandes_list.html', {'commandes': commandes})

@login_required
def modifier_commande(request, commande_id):
    # R√©cup√©rer la commande et ses produits associ√©s
    commande = get_object_or_404(Commande, id=commande_id)

    # Si la requ√™te est en m√©thode POST, nous mettons √† jour les donn√©es
    if request.method == 'POST':
        statut = request.POST.get('status')
        commande.status = statut
        commande.save()

        # Mettre √† jour les quantit√©s des produits associ√©s √† la commande
        for commande_produit in commande.produits.all():
            quantite_key = f'quantite_{commande_produit.id}'
            quantite = request.POST.get(quantite_key)
            if quantite:
                commande_produit.quantite = int(quantite)
                commande_produit.save()

        print(commande.produits.all())  # D√©bogage pour v√©rifier que les produits sont bien associ√©s


        # Rediriger vers la page des commandes une fois les modifications effectu√©es
        return redirect('mes_commandes')

    # Si la m√©thode est GET, on affiche la page de modification
    return render(request, 'user/modifier_commande.html', {'commande': commande})



def supprimer_commande(request, commande_id):
    commande = get_object_or_404(Commande, id=commande_id)
    
    if request.method == 'POST':
        commande.delete()
        return redirect('mes_commandes')  # Redirige vers la page des commandes

    return render(request, 'utilisateur/confirmer_supprimer.html', {'commande': commande})

@login_required
def mon_compte(request):
    try:
        # Acc√®de aux informations du client associ√© √† l'utilisateur connect√©
        client = request.user.client
    except Client.DoesNotExist:
        # Si le client n'existe pas, redirige l'utilisateur vers une page pour compl√©ter son profil
        client = None

    # Si le client existe, on peut afficher ses informations
    if client:
        print(client.nom_client, client.email_client, client.contact, client.adresse)  # V√©rification dans la console

    # Passe les donn√©es du client au template
    return render(request, 'user/mon_compte.html', {'client': client})
@login_required

@login_required
def modifier_compte(request):
    client = request.user.client

    if request.method == 'POST':
        # Mettre √† jour les informations personnelles
        client.nom_client = request.POST.get('nom_client')
        client.email_client = request.POST.get('email_client')
        client.contact = request.POST.get('contact')
        client.adresse = request.POST.get('adresse')
        client.save()

        # V√©rifier si l'utilisateur souhaite changer son mot de passe
        if 'current_password' in request.POST and request.POST['current_password']:
            current_password = request.POST['current_password']
            new_password = request.POST['new_password']
            confirm_password = request.POST['confirm_password']

            # Valider le mot de passe
            if new_password == confirm_password:
                user = request.user
                if user.check_password(current_password):
                    user.set_password(new_password)
                    user.save()
                    update_session_auth_hash(request, user)  # Met √† jour la session de l'utilisateur
                    messages.success(request, "Votre mot de passe a √©t√© modifi√© avec succ√®s.")
                else:
                    messages.error(request, "Le mot de passe actuel est incorrect.")
            else:
                messages.error(request, "Les nouveaux mots de passe ne correspondent pas.")
        
        return redirect('mon_compte')

    return render(request, 'user/modifier_compte.html')

def details_produit(request, produit_id):
    produit = get_object_or_404(Produit, pk=produit_id)
    return render(request, 'user/details_produit.html', {'produit': produit})

@csrf_exempt
def commander_produit(request):
    if request.method == "POST":
        try:
            data = json.loads(request.body)
            produit_id = data.get("produit_id")
            quantite = data.get("quantite")
            client = request.user.client  # Supposant que l'utilisateur est connect√© et li√© √† un client

            if not produit_id or not quantite:
                return JsonResponse({"success": False, "message": "Donn√©es invalides."}, status=400)

            produit = Produit.objects.get(id=produit_id)
            prix_total = produit.prix * int(quantite)

            # Cr√©er la commande
            commande = Commande.objects.create(client=client, prix_total=prix_total)
            CommandeProduit.objects.create(commande=commande, produit=produit, quantite=int(quantite))

            return JsonResponse({"success": True, "message": "Commande enregistr√©e avec succ√®s !"})
        except Exception as e:
            return JsonResponse({"success": False, "message": str(e)}, status=500)
    else:
        return JsonResponse({"success": False, "message": "M√©thode non autoris√©e."}, status=405)